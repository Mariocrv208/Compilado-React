/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,30],$V1=[1,50],$V2=[1,51],$V3=[1,52],$V4=[1,53],$V5=[1,54],$V6=[1,56],$V7=[1,57],$V8=[1,58],$V9=[1,59],$Va=[1,60],$Vb=[1,61],$Vc=[1,62],$Vd=[1,63],$Ve=[1,64],$Vf=[1,55],$Vg=[1,32],$Vh=[1,35],$Vi=[1,34],$Vj=[1,36],$Vk=[1,33],$Vl=[1,38],$Vm=[1,39],$Vn=[1,49],$Vo=[1,28],$Vp=[1,29],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[5,31,34,35,36,37,38,40,53,54,56,57,58,59,60,61,69,71,76,81,82,83,84,85,86,87,90,92,95,100,104,106,108,110,112,114,116,118,120],$VA=[39,40,41,42,43,44,45,46,47,48,49,50,51,52,74],$VB=[2,65],$VC=[2,54],$VD=[2,62],$VE=[2,66],$VF=[2,55],$VG=[1,96],$VH=[1,99],$VI=[1,97],$VJ=[1,98],$VK=[1,103],$VL=[1,112],$VM=[1,117],$VN=[1,118],$VO=[1,119],$VP=[1,120],$VQ=[1,121],$VR=[1,122],$VS=[1,123],$VT=[1,124],$VU=[1,125],$VV=[1,126],$VW=[1,127],$VX=[1,128],$VY=[1,129],$VZ=[1,130],$V_=[1,116],$V$=[6,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,71,74,75,94,98],$V01=[31,49,55,97],$V11=[2,29],$V21=[1,148],$V31=[5,31,34,35,36,37,38,40,53,54,56,57,58,59,60,61,69,71,72,76,81,82,83,84,85,86,87,90,92,95,100,104,106,108,110,112,114,116,118,120],$V41=[6,51,52,55,71,74,75,94,98],$V51=[1,213],$V61=[55,71,94],$V71=[6,39,40,45,46,47,48,49,50,51,52,55,71,74,75,94,98],$V81=[6,39,40,41,42,44,45,46,47,48,49,50,51,52,55,71,74,75,94,98],$V91=[6,45,46,47,48,49,50,51,52,55,71,74,75,94,98],$Va1=[1,242],$Vb1=[55,94],$Vc1=[2,117],$Vd1=[6,55,71,74,75,94,98],$Ve1=[1,281],$Vf1=[1,280],$Vg1=[2,122],$Vh1=[71,81,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_INSTRUCCIONES":4,"EOF":5,"ptyComa":6,"INSTRUCCCION":7,"DECLARAR_VAR":8,"DECLARAR_FUNCION":9,"DECLARAR_METODO":10,"DECLARAR_VECTOR":11,"DECLARAR_LISTA":12,"AGREGAR_A_LISTA":13,"ASIGNACION_VAR":14,"INSTRUCCION_IF":15,"SWITCH":16,"WHILE":17,"CONTINUE":18,"BREAK":19,"RETURN":20,"OPERADOR_TERANARIO":21,"ACTUALIZACION":22,"FOR":23,"DO_WHILE":24,"LLAMDA_FUNC_MET":25,"MODIFICAR_VECTOR":26,"MODIFICAR_LISTA":27,"FUNCION_NATIVA":28,"EXEC":29,"TIPO":30,"identificador":31,"igual":32,"EXPRESION":33,"int":34,"double":35,"boolean":36,"char":37,"string":38,"mas":39,"menos":40,"asterisco":41,"slash":42,"sombrero":43,"modulo":44,"igualIgual":45,"noIgual":46,"menor":47,"menorIgual":48,"mayor":49,"mayorIgual":50,"or":51,"and":52,"admiracion":53,"parentesisA":54,"parentesisC":55,"entero":56,"decimal":57,"true":58,"false":59,"cadena":60,"caracter":61,"ACCESO_VECTOR":62,"ACCDER_A_LISTA":63,"masMas":64,"menosMenos":65,"IF_SIMPLE":66,"ELSE":67,"LISTA_ELSE_IF":68,"if":69,"llaveA":70,"llaveC":71,"else":72,"ELSE_IF":73,"interrogacion":74,"dosPts":75,"switch":76,"SWITCH_CUERPO":77,"CASE_LIST":78,"DEFAULT":79,"CASE":80,"case":81,"default":82,"break":83,"continue":84,"return":85,"while":86,"for":87,"INICIALIZACION_FOR":88,"ACTUALIZACION_FOR":89,"do":90,"LISTA_PARAMETROS":91,"exec":92,"LISTA_VALORES":93,"coma":94,"void":95,"PARAMETRO":96,"corcheteA":97,"corcheteC":98,"new":99,"list":100,"punto":101,"add":102,"FUNC_PRINT":103,"print":104,"FUNC_TO_LOWER":105,"toLower":106,"FUNC_TO_UPPER":107,"toUpper":108,"FUNC_LENGTH":109,"length":110,"FUNC_TRUNCATE":111,"truncate":112,"FUNC_ROUND":113,"round":114,"FUNC_TYPE_OF":115,"typeOf":116,"FUNC_TO_STRING":117,"ToString":118,"FUNC_TO_CHAR_ARRAY":119,"toCharArray":120,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"ptyComa",31:"identificador",32:"igual",34:"int",35:"double",36:"boolean",37:"char",38:"string",39:"mas",40:"menos",41:"asterisco",42:"slash",43:"sombrero",44:"modulo",45:"igualIgual",46:"noIgual",47:"menor",48:"menorIgual",49:"mayor",50:"mayorIgual",51:"or",52:"and",53:"admiracion",54:"parentesisA",55:"parentesisC",56:"entero",57:"decimal",58:"true",59:"false",60:"cadena",61:"caracter",64:"masMas",65:"menosMenos",69:"if",70:"llaveA",71:"llaveC",72:"else",74:"interrogacion",75:"dosPts",76:"switch",81:"case",82:"default",83:"break",84:"continue",85:"return",86:"while",87:"for",90:"do",92:"exec",94:"coma",95:"void",97:"corcheteA",98:"corcheteC",99:"new",100:"list",101:"punto",102:"add",104:"print",106:"toLower",108:"toUpper",110:"length",112:"truncate",114:"round",116:"typeOf",118:"ToString",120:"toCharArray"},
productions_: [0,[3,2],[3,2],[3,0],[4,2],[4,1],[7,2],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,2],[8,4],[8,2],[14,3],[30,1],[30,1],[30,1],[30,1],[30,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[22,2],[22,2],[15,1],[15,2],[15,2],[15,3],[66,7],[66,6],[67,4],[67,3],[73,8],[73,7],[68,2],[68,1],[21,5],[16,7],[77,2],[77,1],[77,1],[78,2],[78,1],[80,4],[79,3],[19,2],[18,2],[20,3],[20,2],[17,7],[23,11],[88,1],[88,1],[89,1],[89,1],[24,9],[9,7],[9,8],[29,4],[29,5],[93,3],[93,1],[10,7],[10,8],[10,6],[91,3],[91,1],[96,2],[25,4],[25,3],[11,10],[11,8],[62,4],[26,6],[12,11],[12,7],[13,6],[63,6],[27,8],[103,4],[105,4],[107,4],[109,4],[111,4],[113,4],[115,4],[117,4],[119,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 respuesta.errorSintactico = ""; respuesta.listaIns = $$[$0-1]; return respuesta; 
break;
case 2:
 respuesta.errorSintactico  =  "Error Sintactico: " + "Linea: "  + (this._$.first_line-1) + ", Columna: " + this._$.first_column ; return respuesta; 
break;
case 4: case 79: case 86:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 5: case 80: case 87: case 106: case 111:
 this.$ = [$$[$0]]; 
break;
case 6: case 9: case 10: case 11: case 12: case 19: case 20: case 23: case 24: case 25: case 26: case 27: case 52:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 13: case 14: case 15: case 16: case 17: case 18: case 21: case 22: case 54: case 62: case 63: case 64: case 65: case 66:
 this.$ = $$[$0]; 
break;
case 28:
 this.$ = Instruccion.nuevaDeclaracion($$[$0-2], $$[$0], $$[$0-3], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5;
break;
case 29:
 this.$ = Instruccion.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 30:
 this.$ = Instruccion.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4; 
break;
case 31:
 this.$ = TIPO_DATO.ENTERO; 
break;
case 32:
 this.$ = TIPO_DATO.DECIMAL; 
break;
case 33:
 this.$ = TIPO_DATO.BANDERA; 
break;
case 34:
 this.$ = TIPO_DATO.CARACTER; 
break;
case 35:
 this.$ = TIPO_DATO.CADENA; 
break;
case 36:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 37:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 38:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 39:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 40:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA, this._$.first_line, this._$.first_column+1, idSentencia++); idSentencia += 3; 
break;
case 41:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO, this._$.first_line, this._$.first_column+1, idSentencia++);  idSentencia += 3; 
break;
case 42:
 this.$ = Instruccion.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.UMENOS, this._$.first_line, this._$.first_column+1, idSentencia++);  idSentencia += 3; 
break;
case 43:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUALIGUAL, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 44:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NOIGUAL, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 45:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 46:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENORIGUAL, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 47:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 48:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYORIGUAL, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 49:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 50:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 51:
 this.$ = Instruccion.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 53:
 this.$ = Instruccion.nuevoCasteo($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5 
break;
case 55:
 this.$ = Instruccion.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1, idSentencia); idSentencia += 2; 
break;
case 56:
 this.$ = Instruccion.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line, this._$.first_column+1, idSentencia);idSentencia += 2; 
break;
case 57:
 this.$ = Instruccion.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 2; 
break;
case 58: case 59:
 this.$ = Instruccion.nuevoValor(toBool($$[$0]), TIPO_VALOR.BANDERA, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 2; 
break;
case 60:
 this.$ = Instruccion.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 2; 
break;
case 61:
 this.$ = Instruccion.nuevoValor($$[$0], TIPO_VALOR.CARACTER, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 2; 
break;
case 67:
 this.$ = Instruccion.nuevaActualizacion($$[$0-1], TIPO_OPERACION.INCREMENTO, this._$.first_line, this._$.first_column+1, idSentencia++); 
break;
case 68:
 this.$ = Instruccion.nuevaActualizacion($$[$0-1], TIPO_OPERACION.DECREMENTO, this._$.first_line, this._$.first_column+1, idSentencia++); 
break;
case 69:
 this.$ = Instruccion.nuevoIf($$[$0], [], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4; 
break;
case 70:
 this.$ = Instruccion.nuevoIf($$[$0-1], [], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4; 
break;
case 71:
 this.$ = Instruccion.nuevoIf($$[$0-1], $$[$0], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4; 
break;
case 72:
 this.$ = Instruccion.nuevoIf($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4; 
break;
case 73:
 this.$ = Instruccion.nuevoIfSimple($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8; 
break;
case 74:
 this.$ = Instruccion.nuevoIfSimple($$[$0-3], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8; 
break;
case 75:
 this.$ = $$[$0-1]; idSentencia += 5; 
break;
case 76:
 this.$ = []; idSentencia += 5; 
break;
case 77:
 this.$ = Instruccion.nuevoElseIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9; 
break;
case 78:
 this.$ = Instruccion.nuevoElseIf($$[$0-3], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9; 
break;
case 81:
 this.$ = Instruccion.nuevoOpTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 6; 
break;
case 82:
 this.$ = Instruccion.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8; 
break;
case 83:
 this.$ = Instruccion.nuevoSwitchCuerpo($$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 84:
 this.$ = Instruccion.nuevoSwitchCuerpo($$[$0], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 85:
 this.$ = Instruccion.nuevoSwitchCuerpo([], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 88:
 this.$ = Instruccion.nuevoCase($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 89:
 this.$ = $$[$0]; idSentencia += 4; 
break;
case 90:
 this.$ = Instruccion.nuevoBreak(this._$.first_line, this._$.first_column+1, idSentencia++);
break;
case 91:
 this.$ = Instruccion.nuevoContinue(this._$.first_line, this._$.first_column+1, idSentencia++);
break;
case 92:
 this.$ = Instruccion.nuevoReturn($$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4;
break;
case 93:
 this.$ = Instruccion.nuevoReturn(null, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4;
break;
case 94:
 this.$ = Instruccion.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8; 
break;
case 95:
 this.$ = Instruccion.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 12; 
break;
case 96: case 97: case 98: case 99: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141:
 this.$ = $$[$0] 
break;
case 100:
 this.$ = Instruccion.nuevoDoWhile($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 10 
break;
case 101:
 this.$ = Instruccion.nuevaDecMetodo($$[$0-6], $$[$0-5], [], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8 
break;
case 102:
 this.$ = Instruccion.nuevaDecMetodo($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8 
break;
case 103:
 this.$ = Instruccion.nuevoExec($$[$0-2], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5 
break;
case 104:
 this.$ = Instruccion.nuevoExec($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 6  
break;
case 105:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 107:
 this.$ = Instruccion.nuevaDecMetodo(null, $$[$0-5], [], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9 
break;
case 108:
 this.$ = Instruccion.nuevaDecMetodo(null, $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9 
break;
case 109:
 this.$ = Instruccion.nuevaDecMetodo(null, $$[$0-4], [], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9 
break;
case 110:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 112:
 this.$ = Instruccion.nuevoParametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 2 
break;
case 113:
 this.$ = Instruccion.nuevaLLamdaFuncionMetodo($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5 
break;
case 114:
 this.$ = Instruccion.nuevaLLamdaFuncionMetodo($$[$0-2], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4 
break;
case 115:
 this.$ = Instruccion.nuevaDecVectorFormaUno($$[$0-9], $$[$0-6], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 11; 
break;
case 116:
 this.$ = Instruccion.nuevaDecVectorFormaDos($$[$0-7], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 11; 
break;
case 117:
 this.$ = Instruccion.nuevoAccesoVector($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 118:
 this.$ = Instruccion.nuevaModVector($$[$0-5], $$[$0-3], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 7; 
break;
case 119:
 this.$ = Instruccion.nuevaDecLista($$[$0-8], $$[$0-6], $$[$0-1], this._$.first_line, this._$.first_column+1,  idSentencia); idSentencia += 12; 
break;
case 120:
 this.$ = Instruccion.nuevaDecListaFormaDos($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1,  idSentencia); idSentencia += 12; 
break;
case 121:
 this.$ = Instruccion.nuevoAgregarLista($$[$0-5], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 7; 
break;
case 122:
 this.$ = Instruccion.nuevoAccesoLista($$[$0-5], $$[$0-2], this._$.first_line, this._$.first_column+1,  idSentencia); idSentencia += 7; 
break;
case 123:
 this.$ = Instruccion.nuevaModLista($$[$0-7], $$[$0-4], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9; 
break;
case 124:
 this.$ = Instruccion.nuevoPrint($$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 125:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TO_LOWER, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 126:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TO_UPPER, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 127:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_LENGTH, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 128:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TRUNCATE, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 129:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_ROUND, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 130:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TYPE_OF, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 131:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TO_STRING, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 132:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TO_CHAR_ARRAY, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
}
},
table: [{1:[2,3],2:[1,3],3:1,4:2,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{1:[3]},{5:[1,76],7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{6:[1,78]},o($Vz,[2,5]),{6:[1,79]},o($Vz,[2,7]),o($Vz,[2,8]),{6:[1,80]},{6:[1,81]},{6:[1,82]},{6:[1,83]},o($Vz,[2,13]),o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,16]),o($Vz,[2,17]),o($Vz,[2,18]),o($VA,$VB,{6:[1,84]}),o($VA,$VC,{6:[1,85]}),o($Vz,[2,21]),o($Vz,[2,22]),o($VA,$VD,{6:[1,86]}),{6:[1,87]},{6:[1,88]},o($VA,$VE,{6:[1,89]}),{6:[1,90]},{31:[1,91],97:[1,92]},{31:[1,93]},{47:[1,94]},o($VA,$VF,{32:$VG,54:$VH,64:$VI,65:$VJ,97:[1,100],101:[1,95]}),o($Vz,[2,69],{67:101,68:102,73:104,72:$VK}),{54:[1,105]},{54:[1,106]},{6:[1,107]},{6:[1,108]},{6:[1,110],21:114,22:111,25:113,28:115,31:$VL,33:109,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_},{54:[1,131]},{70:[1,132]},o($V$,[2,133]),o($V$,[2,134]),o($V$,[2,135]),o($V$,[2,136]),o($V$,[2,137]),o($V$,[2,138]),o($V$,[2,139]),o($V$,[2,140]),o($V$,[2,141]),{31:[1,133]},o($V01,[2,31]),o($V01,[2,32]),o($V01,[2,33]),o($V01,[2,34]),o($V01,[2,35]),{54:[1,134]},{21:114,22:111,25:113,28:115,31:$VL,33:135,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:136,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,30:138,31:$VL,33:137,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($V$,[2,56]),o($V$,[2,57]),o($V$,[2,58]),o($V$,[2,59]),o($V$,[2,60]),o($V$,[2,61]),o($V$,[2,63]),o($V$,[2,64]),{54:[1,139]},{54:[1,140]},{54:[1,141]},{54:[1,142]},{54:[1,143]},{54:[1,144]},{54:[1,145]},{54:[1,146]},{54:[1,147]},{1:[2,1]},o($Vz,[2,4]),{1:[2,2]},o($Vz,[2,6]),o($Vz,[2,9]),o($Vz,[2,10]),o($Vz,[2,11]),o($Vz,[2,12]),o($Vz,[2,19]),o($Vz,[2,20]),o($Vz,[2,23]),o($Vz,[2,24]),o($Vz,[2,25]),o($Vz,[2,26]),o($Vz,[2,27]),{6:$V11,32:$V21,54:[1,149]},{98:[1,150]},{54:[1,151]},{30:152,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5},{102:[1,153]},{21:114,22:111,25:113,28:115,31:$VL,33:154,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($V$,[2,67]),o($V$,[2,68]),{21:114,22:111,25:113,28:115,31:$VL,33:157,40:$V6,53:$V7,54:$V8,55:[1,156],56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,93:155,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:158,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,97:[1,159],103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($Vz,[2,70]),o($Vz,[2,71],{67:160,73:161,72:$VK}),{69:[1,163],70:[1,162]},o($V31,[2,80]),{21:114,22:111,25:113,28:115,31:$VL,33:164,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:165,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($Vz,[2,91]),o($Vz,[2,90]),{6:[1,166],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_},o($Vz,[2,93]),o($V$,$VC),o($V$,$VF,{54:$VH,64:$VI,65:$VJ,97:[1,167]}),o($V$,$VD),o($V$,$VB),o($V$,$VE),{21:114,22:111,25:113,28:115,31:$VL,33:168,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:169,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:170,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:171,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:172,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:173,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:174,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:175,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:176,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:177,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:178,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:179,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:180,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:181,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:182,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{8:184,14:185,30:186,31:[1,187],34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,88:183},{4:188,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{54:[1,189]},{21:114,22:111,25:113,28:115,31:$VL,33:190,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($V$,[2,42]),o($V41,[2,51],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX}),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,191],74:$V_},{55:[1,192]},{21:114,22:111,25:113,28:115,31:$VL,33:193,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:194,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:195,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:196,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:197,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:198,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:199,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:200,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:201,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:202,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{30:206,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,55:[1,203],91:204,96:205},{31:[1,207]},{30:206,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,55:[1,208],91:209,96:205},{49:[1,210]},{54:[1,211]},o([6,55],[2,30],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_}),{55:[1,212],94:$V51},o($V$,[2,114]),o($V61,[2,106],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_}),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_,98:[1,214]},{21:114,22:111,25:113,28:115,31:$VL,33:215,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($Vz,[2,72]),o($V31,[2,79]),{4:216,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,217],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{54:[1,218]},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,219],74:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,220],74:$V_},o($Vz,[2,92]),{21:114,22:111,25:113,28:115,31:$VL,33:221,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,97:[1,222],103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_,75:[1,223]},o($V71,[2,36],{41:$VO,42:$VP,43:$VQ,44:$VR}),o($V71,[2,37],{41:$VO,42:$VP,43:$VQ,44:$VR}),o($V81,[2,38],{43:$VQ}),o($V81,[2,39],{43:$VQ}),o($V$,[2,40]),o($V81,[2,41],{43:$VQ}),o($V91,[2,43],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o($V91,[2,44],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o($V91,[2,45],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o($V91,[2,46],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o($V91,[2,47],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o($V91,[2,48],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o([6,51,55,71,74,75,94,98],[2,49],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,52:$VZ}),o($V41,[2,50],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX}),{6:[1,224]},{6:[2,96]},{6:[2,97]},{31:[1,225]},{32:$VG},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,226],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:157,40:$V6,53:$V7,54:$V8,55:[1,227],56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,93:228,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,229],74:$V_},o($V$,[2,52]),{21:114,22:111,25:113,28:115,31:$VL,33:230,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,231],74:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,232],74:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,233],74:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,234],74:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,235],74:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,236],74:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,237],74:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,238],74:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,239],74:$V_},{6:[2,28],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_},{70:[1,240]},{55:[1,241],94:$Va1},o($Vb1,[2,111]),{31:[1,243]},{32:[1,244]},{70:[1,245]},{55:[1,246],94:$Va1},{31:[1,247]},{21:114,22:111,25:113,28:115,31:$VL,33:248,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($V$,[2,113]),{21:114,22:111,25:113,28:115,31:$VL,33:249,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($VA,$Vc1,{32:[1,250]}),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_,98:[1,251]},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,252],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($Vz,[2,76]),{21:114,22:111,25:113,28:115,31:$VL,33:253,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{70:[1,254]},{70:[1,255]},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_,98:[1,256]},{21:114,22:111,25:113,28:115,31:$VL,33:257,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:258,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:259,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{6:$V11,32:$V21},{86:[1,260]},{6:[2,103]},{55:[1,261],94:$V51},{70:[1,262]},o($Vd1,[2,53],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ}),o($V$,[2,124]),o($V$,[2,125]),o($V$,[2,126]),o($V$,[2,127]),o($V$,[2,128]),o($V$,[2,129]),o($V$,[2,130]),o($V$,[2,131]),o($V$,[2,132]),{4:263,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{70:[1,264]},{30:206,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,96:265},o($Vb1,[2,112]),{70:[1,267],99:[1,266]},{4:268,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,269],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{70:[1,270]},{32:[1,271]},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,272],74:$V_},o($V61,[2,105],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_}),{21:114,22:111,25:113,28:115,31:$VL,33:273,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{98:[1,274]},o($Vz,[2,75]),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,275],74:$V_},{77:276,78:277,79:278,80:279,81:$Ve1,82:$Vf1},{4:282,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($V$,$Vc1),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_,98:[1,283]},o($Vd1,[2,81],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ}),{6:[1,284],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_},{54:[1,285]},{6:[2,104]},{4:286,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,287],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,288],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{4:289,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($Vb1,[2,110]),{30:290,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5},{21:114,22:111,25:113,28:115,31:$VL,33:157,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,93:291,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,292],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($Vz,[2,109]),{4:293,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{21:114,22:111,25:113,28:115,31:$VL,33:295,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,99:[1,294],103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{6:[2,121]},{6:[2,118],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_},o($VA,$Vg1,{32:[1,296]}),{70:[1,297]},{71:[1,298]},{71:[2,84],79:299,80:300,81:$Ve1,82:$Vf1},{71:[2,85]},o($Vh1,[2,87]),{75:[1,301]},{21:114,22:111,25:113,28:115,31:$VL,33:302,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,303],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{98:[1,304]},{14:307,22:306,31:[1,308],89:305},{21:114,22:111,25:113,28:115,31:$VL,33:309,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,310],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($V31,[2,74]),o($Vz,[2,101]),{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,311],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{97:[1,312]},{71:[1,313],94:$V51},o($Vz,[2,107]),{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,314],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{100:[1,315]},{6:[2,120],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_},{21:114,22:111,25:113,28:115,31:$VL,33:316,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{4:317,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,318],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($Vz,[2,82]),{71:[2,83]},o($Vh1,[2,86]),{4:319,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_,75:[1,320]},o($Vz,[2,94]),o($V$,$Vg1),{55:[1,321]},{55:[2,98]},{55:[2,99]},{32:$VG,64:$VI,65:$VJ},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,322],74:$V_},o($V31,[2,73]),o($Vz,[2,102]),{21:114,22:111,25:113,28:115,31:$VL,33:323,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{6:[2,116]},o($Vz,[2,108]),{47:[1,324]},{6:[2,123],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,325],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($V31,[2,78]),{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[2,89],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{4:326,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{70:[1,327]},{6:[1,328]},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,74:$V_,98:[1,329]},{30:330,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5},o($V31,[2,77]),o($Vh1,[2,88],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,66:31,33:37,103:40,105:41,107:42,109:43,111:44,113:45,115:46,117:47,119:48,62:65,63:66,7:77,31:$V0,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,104:$Vq,106:$Vr,108:$Vs,110:$Vt,112:$Vu,114:$Vv,116:$Vw,118:$Vx,120:$Vy}),{4:331,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},o($Vz,[2,100]),{6:[2,115]},{49:[1,332]},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,333],76:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,90:$Vm,92:$Vn,95:$Vo,100:$Vp,103:40,104:$Vq,105:41,106:$Vr,107:42,108:$Vs,109:43,110:$Vt,111:44,112:$Vu,113:45,114:$Vv,115:46,116:$Vw,117:47,118:$Vx,119:48,120:$Vy},{6:[2,119]},o($Vz,[2,95])],
defaultActions: {76:[2,1],78:[2,2],184:[2,96],185:[2,97],227:[2,103],261:[2,104],272:[2,121],278:[2,85],299:[2,83],306:[2,98],307:[2,99],313:[2,116],329:[2,115],332:[2,119]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
      
	const TIPO_OPERACION = require('./Controlador/Tipos/TipoOperacion');
	const TIPO_VALOR = require('./Controlador/Tipos/TipoValor');
	const TIPO_DATO = require('./Controlador/Tipos/TipoDato'); //para jalar el tipo de dato
	const Instruccion = require('./Controlador/Instrucciones/NodoIns');
        const TIPO_FUNC_NATIVA = require('./Controlador/Tipos/TipoFuncNativa')

        function toBool(texto) {
                if (texto == "true") {
                        return true
                }
                return false
        }

        let idSentencia = 1;
        let respuesta = {
                listaIns: [],
                errorSintactico: ""
        };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 34
break;
case 4:return 35
break;
case 5:return 36
break;
case 6:return 37
break;
case 7:return 38
break;
case 8:return 58
break;
case 9:return 59
break;
case 10:return 51
break;
case 11:return 52
break;
case 12:return 45
break;
case 13:return 46
break;
case 14:return 53
break;
case 15:return 50
break;
case 16:return 48
break;
case 17:return 47
break;
case 18:return 69
break;
case 19:return 72
break;
case 20:return 76
break;
case 21:return 81
break;
case 22:return 83
break;
case 23:return 82
break;
case 24:return 86
break;
case 25:return 84
break;
case 26:return 87
break;
case 27:return 90
break;
case 28:return 85
break;
case 29:return 95
break;
case 30:return 99
break;
case 31:return 100
break;
case 32:return 102
break;
case 33:return 104
break;
case 34:return 106
break;
case 35:return 108
break;
case 36:return 110
break;
case 37:return 112
break;
case 38:return 114
break;
case 39:return 116
break;
case 40:return 118
break;
case 41:return 120
break;
case 42:return 92
break;
case 43:return 'hash'
break;
case 44:return 'dolar'
break;
case 45:return 44
break;
case 46:return 'amberson'
break;
case 47:return 54
break;
case 48:return 55
break;
case 49:return 41
break;
case 50:return 64
break;
case 51:return 39 
break;
case 52:return 94
break;
case 53:return 65
break;
case 54:return 40
break;
case 55:return 101 
break;
case 56:return 42
break;
case 57:return 75
break;
case 58:return 6
break;
case 59:return 32 
break;
case 60:return 49
break;
case 61:return 74
break;
case 62:return 'arroba' 
break;
case 63:return 97
break;
case 64:return 'slashInverso'
break;
case 65:return 98
break;
case 66:return 43 
break;
case 67:return 'underScore' 
break;
case 68:return 70
break;
case 69:return 'barra'
break;
case 70:return 71
break;
case 71:return 'colocho'
break;
case 72:return 31
break;
case 73:return 'letra'
break;
case 74:return 57
break;
case 75:return 56
break;
case 76: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 60; 
break;
case 77: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 78:return 5      /* End of File */
break;
case 79: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[\n\t\s\r]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:%)/i,/^(?:&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\*)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:,)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\.)/i,/^(?:\/)/i,/^(?::)/i,/^(?:;)/i,/^(?:=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\\)/i,/^(?:\])/i,/^(?:\^)/i,/^(?:_\b)/i,/^(?:\{)/i,/^(?:\|)/i,/^(?:\})/i,/^(?:~)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[a-zA-Z])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:'((\\')|[^\n\'])')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}