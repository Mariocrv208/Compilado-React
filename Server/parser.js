/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,28],$V1=[1,50],$V2=[1,51],$V3=[1,52],$V4=[1,53],$V5=[1,54],$V6=[1,56],$V7=[1,57],$V8=[1,58],$V9=[1,59],$Va=[1,60],$Vb=[1,61],$Vc=[1,62],$Vd=[1,63],$Ve=[1,64],$Vf=[1,55],$Vg=[1,32],$Vh=[1,35],$Vi=[1,34],$Vj=[1,36],$Vk=[1,33],$Vl=[1,38],$Vm=[1,39],$Vn=[1,49],$Vo=[1,29],$Vp=[1,30],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[5,31,34,35,36,37,38,40,53,54,56,57,58,59,60,61,69,71,77,82,83,84,85,86,87,88,91,93,96,101,105,107,109,111,113,115,117,119,121],$VA=[39,40,41,42,43,44,45,46,47,48,49,50,51,52,75],$VB=[2,65],$VC=[2,54],$VD=[2,62],$VE=[2,66],$VF=[2,55],$VG=[1,95],$VH=[1,96],$VI=[1,97],$VJ=[1,103],$VK=[1,105],$VL=[1,113],$VM=[1,118],$VN=[1,119],$VO=[1,120],$VP=[1,121],$VQ=[1,122],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[1,126],$VV=[1,127],$VW=[1,128],$VX=[1,129],$VY=[1,130],$VZ=[1,131],$V_=[1,117],$V$=[6,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,71,75,76,95,99],$V01=[31,49,55,70,98],$V11=[2,29],$V21=[1,149],$V31=[5,31,34,35,36,37,38,40,53,54,56,57,58,59,60,61,69,71,72,74,77,82,83,84,85,86,87,88,91,93,96,101,105,107,109,111,113,115,117,119,121],$V41=[6,51,52,55,71,75,76,95,99],$V51=[2,121],$V61=[1,214],$V71=[1,216],$V81=[55,95],$V91=[55,71,95],$Va1=[6,39,40,45,46,47,48,49,50,51,52,55,71,75,76,95,99],$Vb1=[6,39,40,41,42,44,45,46,47,48,49,50,51,52,55,71,75,76,95,99],$Vc1=[6,45,46,47,48,49,50,51,52,55,71,75,76,95,99],$Vd1=[2,124],$Ve1=[6,55,71,75,76,95,99],$Vf1=[1,298],$Vg1=[1,297],$Vh1=[2,129],$Vi1=[71,82,83];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_INSTRUCCIONES":4,"EOF":5,"ptyComa":6,"INSTRUCCCION":7,"DECLARAR_VAR":8,"DECLARAR_FUNCION":9,"DECLARAR_METODO":10,"DECLARAR_VECTOR":11,"DECLARAR_LISTA":12,"AGREGAR_A_LISTA":13,"ASIGNACION_VAR":14,"INSTRUCCION_IF":15,"SWITCH":16,"WHILE":17,"CONTINUE":18,"BREAK":19,"RETURN":20,"OPERADOR_TERANARIO":21,"ACTUALIZACION":22,"FOR":23,"DO_WHILE":24,"LLAMDA_FUNC_MET":25,"MODIFICAR_VECTOR":26,"MODIFICAR_LISTA":27,"FUNCION_NATIVA":28,"RUN":29,"TIPO":30,"identificador":31,"igual":32,"EXPRESION":33,"int":34,"double":35,"boolean":36,"char":37,"string":38,"mas":39,"menos":40,"asterisco":41,"slash":42,"sombrero":43,"modulo":44,"igualIgual":45,"noIgual":46,"menor":47,"menorIgual":48,"mayor":49,"mayorIgual":50,"or":51,"and":52,"admiracion":53,"parentesisA":54,"parentesisC":55,"entero":56,"decimal":57,"true":58,"false":59,"cadena":60,"caracter":61,"ACCESO_VECTOR":62,"ACCDER_A_LISTA":63,"masMas":64,"menosMenos":65,"IF_SIMPLE":66,"ELSE":67,"LISTA_ELSE_IF":68,"if":69,"llaveA":70,"llaveC":71,"else":72,"ELSE_IF":73,"elif":74,"interrogacion":75,"dosPts":76,"switch":77,"SWITCH_CUERPO":78,"CASE_LIST":79,"DEFAULT":80,"CASE":81,"case":82,"default":83,"break":84,"continue":85,"return":86,"while":87,"for":88,"INICIALIZACION_FOR":89,"ACTUALIZACION_FOR":90,"do":91,"LISTA_PARAMETROS":92,"run":93,"LISTA_VALORES":94,"coma":95,"void":96,"PARAMETRO":97,"corcheteA":98,"corcheteC":99,"new":100,"list":101,"punto":102,"add":103,"FUNC_PRINT":104,"print":105,"FUNC_TO_LOWER":106,"toLower":107,"FUNC_TO_UPPER":108,"toUpper":109,"FUNC_LENGTH":110,"length":111,"FUNC_TRUNCATE":112,"truncate":113,"FUNC_ROUND":114,"round":115,"FUNC_TYPE_OF":116,"typeOf":117,"FUNC_TO_STRING":118,"ToString":119,"FUNC_TO_CHAR_ARRAY":120,"toCharArray":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"ptyComa",31:"identificador",32:"igual",34:"int",35:"double",36:"boolean",37:"char",38:"string",39:"mas",40:"menos",41:"asterisco",42:"slash",43:"sombrero",44:"modulo",45:"igualIgual",46:"noIgual",47:"menor",48:"menorIgual",49:"mayor",50:"mayorIgual",51:"or",52:"and",53:"admiracion",54:"parentesisA",55:"parentesisC",56:"entero",57:"decimal",58:"true",59:"false",60:"cadena",61:"caracter",64:"masMas",65:"menosMenos",69:"if",70:"llaveA",71:"llaveC",72:"else",74:"elif",75:"interrogacion",76:"dosPts",77:"switch",82:"case",83:"default",84:"break",85:"continue",86:"return",87:"while",88:"for",91:"do",93:"run",95:"coma",96:"void",98:"corcheteA",99:"corcheteC",100:"new",101:"list",102:"punto",103:"add",105:"print",107:"toLower",109:"toUpper",111:"length",113:"truncate",115:"round",117:"typeOf",119:"ToString",121:"toCharArray"},
productions_: [0,[3,2],[3,2],[3,0],[4,2],[4,1],[7,2],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,2],[8,4],[8,2],[14,3],[30,1],[30,1],[30,1],[30,1],[30,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[22,2],[22,2],[15,1],[15,2],[15,2],[15,3],[66,7],[66,6],[67,4],[67,3],[73,8],[73,7],[73,7],[73,6],[68,2],[68,1],[21,5],[16,7],[78,2],[78,1],[78,1],[79,2],[79,1],[81,4],[80,3],[19,2],[18,2],[20,3],[20,2],[17,7],[23,11],[89,1],[89,1],[90,1],[90,1],[24,9],[9,7],[9,8],[9,8],[9,9],[29,4],[29,5],[94,3],[94,1],[10,7],[10,8],[10,6],[10,8],[10,9],[10,7],[92,3],[92,1],[97,2],[25,4],[25,3],[11,10],[11,8],[62,4],[26,6],[12,11],[12,7],[13,6],[63,6],[27,8],[104,4],[106,4],[108,4],[110,4],[112,4],[114,4],[116,4],[118,4],[120,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 respuesta.errorSintactico = ""; respuesta.listaIns = $$[$0-1]; return respuesta; 
break;
case 2:
 respuesta.errorSintactico  =  "Error Sintactico: " + "Linea: "  + (this._$.first_line-1) + ", Columna: " + this._$.first_column ; return respuesta; 
break;
case 4: case 81: case 88:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 5: case 82: case 89: case 110: case 118:
 this.$ = [$$[$0]]; 
break;
case 6: case 9: case 10: case 11: case 12: case 19: case 20: case 23: case 24: case 25: case 26: case 27: case 52:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 13: case 14: case 15: case 16: case 17: case 18: case 21: case 22: case 54: case 62: case 63: case 64: case 65: case 66:
 this.$ = $$[$0]; 
break;
case 28:
 this.$ = Instruccion.nuevaDeclaracion($$[$0-2], $$[$0], $$[$0-3], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5;
break;
case 29:
 this.$ = Instruccion.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 30:
 this.$ = Instruccion.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4; 
break;
case 31:
 this.$ = TIPO_DATO.ENTERO; 
break;
case 32:
 this.$ = TIPO_DATO.DECIMAL; 
break;
case 33:
 this.$ = TIPO_DATO.BANDERA; 
break;
case 34:
 this.$ = TIPO_DATO.CARACTER; 
break;
case 35:
 this.$ = TIPO_DATO.CADENA; 
break;
case 36:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 37:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 38:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 39:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 40:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA, this._$.first_line, this._$.first_column+1, idSentencia++); idSentencia += 3; 
break;
case 41:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO, this._$.first_line, this._$.first_column+1, idSentencia++);  idSentencia += 3; 
break;
case 42:
 this.$ = Instruccion.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.UMENOS, this._$.first_line, this._$.first_column+1, idSentencia++);  idSentencia += 3; 
break;
case 43:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUALIGUAL, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 44:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NOIGUAL, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 45:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 46:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENORIGUAL, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 47:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 48:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYORIGUAL, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 49:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 50:
 this.$ = Instruccion.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 51:
 this.$ = Instruccion.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 53:
 this.$ = Instruccion.nuevoCasteo($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5 
break;
case 55:
 this.$ = Instruccion.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1, idSentencia); idSentencia += 2; 
break;
case 56:
 this.$ = Instruccion.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line, this._$.first_column+1, idSentencia);idSentencia += 2; 
break;
case 57:
 this.$ = Instruccion.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 2; 
break;
case 58: case 59:
 this.$ = Instruccion.nuevoValor(toBool($$[$0]), TIPO_VALOR.BANDERA, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 2; 
break;
case 60:
 this.$ = Instruccion.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 2; 
break;
case 61:
 this.$ = Instruccion.nuevoValor($$[$0], TIPO_VALOR.CARACTER, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 2; 
break;
case 67:
 this.$ = Instruccion.nuevaActualizacion($$[$0-1], TIPO_OPERACION.INCREMENTO, this._$.first_line, this._$.first_column+1, idSentencia++); 
break;
case 68:
 this.$ = Instruccion.nuevaActualizacion($$[$0-1], TIPO_OPERACION.DECREMENTO, this._$.first_line, this._$.first_column+1, idSentencia++); 
break;
case 69:
 this.$ = Instruccion.nuevoIf($$[$0], [], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4; 
break;
case 70:
 this.$ = Instruccion.nuevoIf($$[$0-1], [], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4; 
break;
case 71:
 this.$ = Instruccion.nuevoIf($$[$0-1], $$[$0], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4; 
break;
case 72:
 this.$ = Instruccion.nuevoIf($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4; 
break;
case 73:
 this.$ = Instruccion.nuevoIfSimple($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8; 
break;
case 74:
 this.$ = Instruccion.nuevoIfSimple($$[$0-3], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8; 
break;
case 75:
 this.$ = $$[$0-1]; idSentencia += 5; 
break;
case 76:
 this.$ = []; idSentencia += 5; 
break;
case 77: case 79:
 this.$ = Instruccion.nuevoElseIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9; 
break;
case 78: case 80:
 this.$ = Instruccion.nuevoElseIf($$[$0-3], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9; 
break;
case 83:
 this.$ = Instruccion.nuevoOpTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 6; 
break;
case 84:
 this.$ = Instruccion.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8; 
break;
case 85:
 this.$ = Instruccion.nuevoSwitchCuerpo($$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 86:
 this.$ = Instruccion.nuevoSwitchCuerpo($$[$0], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 87:
 this.$ = Instruccion.nuevoSwitchCuerpo([], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 90:
 this.$ = Instruccion.nuevoCase($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 91:
 this.$ = $$[$0]; idSentencia += 4; 
break;
case 92:
 this.$ = Instruccion.nuevoBreak(this._$.first_line, this._$.first_column+1, idSentencia++);
break;
case 93:
 this.$ = Instruccion.nuevoContinue(this._$.first_line, this._$.first_column+1, idSentencia++);
break;
case 94:
 this.$ = Instruccion.nuevoReturn($$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4;
break;
case 95:
 this.$ = Instruccion.nuevoReturn(null, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4;
break;
case 96:
 this.$ = Instruccion.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8; 
break;
case 97:
 this.$ = Instruccion.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 12; 
break;
case 98: case 99: case 100: case 101: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148:
 this.$ = $$[$0] 
break;
case 102:
 this.$ = Instruccion.nuevoDoWhile($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 10 
break;
case 103:
 this.$ = Instruccion.nuevaDecMetodo($$[$0-6], $$[$0-5], [], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8 
break;
case 104:
 this.$ = Instruccion.nuevaDecMetodo($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8 
break;
case 105:
 this.$ = Instruccion.nuevaDecMetodo($$[$0-3], $$[$0-7], [], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8 
break;
case 106:
 this.$ = Instruccion.nuevaDecMetodo($$[$0-3], $$[$0-8], $$[$0-6], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 8 
break;
case 107:
 this.$ = Instruccion.nuevoExec($$[$0-2], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5 
break;
case 108:
 this.$ = Instruccion.nuevoExec($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 6  
break;
case 109:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 111:
 this.$ = Instruccion.nuevaDecMetodo(null, $$[$0-5], [], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9 
break;
case 112:
 this.$ = Instruccion.nuevaDecMetodo(null, $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9 
break;
case 113:
 this.$ = Instruccion.nuevaDecMetodo(null, $$[$0-4], [], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9 
break;
case 114:
 this.$ = Instruccion.nuevaDecMetodo(null, $$[$0-7], [], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9 
break;
case 115:
 this.$ = Instruccion.nuevaDecMetodo(null, $$[$0-8], $$[$0-6], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9 
break;
case 116:
 this.$ = Instruccion.nuevaDecMetodo(null, $$[$0-6], [], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9 
break;
case 117:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 119:
 this.$ = Instruccion.nuevoParametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 2 
break;
case 120:
 this.$ = Instruccion.nuevaLLamdaFuncionMetodo($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5 
break;
case 121:
 this.$ = Instruccion.nuevaLLamdaFuncionMetodo($$[$0-2], [], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4 
break;
case 122:
 this.$ = Instruccion.nuevaDecVectorFormaUno($$[$0-9], $$[$0-6], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 11; 
break;
case 123:
 this.$ = Instruccion.nuevaDecVectorFormaDos($$[$0-7], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 11; 
break;
case 124:
 this.$ = Instruccion.nuevoAccesoVector($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 125:
 this.$ = Instruccion.nuevaModVector($$[$0-5], $$[$0-3], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 7; 
break;
case 126:
 this.$ = Instruccion.nuevaDecLista($$[$0-8], $$[$0-6], $$[$0-1], this._$.first_line, this._$.first_column+1,  idSentencia); idSentencia += 12; 
break;
case 127:
 this.$ = Instruccion.nuevaDecListaFormaDos($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1,  idSentencia); idSentencia += 12; 
break;
case 128:
 this.$ = Instruccion.nuevoAgregarLista($$[$0-5], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 7; 
break;
case 129:
 this.$ = Instruccion.nuevoAccesoLista($$[$0-5], $$[$0-2], this._$.first_line, this._$.first_column+1,  idSentencia); idSentencia += 7; 
break;
case 130:
 this.$ = Instruccion.nuevaModLista($$[$0-7], $$[$0-4], $$[$0], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 9; 
break;
case 131:
 this.$ = Instruccion.nuevoPrint($$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 3; 
break;
case 132:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TO_LOWER, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 133:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TO_UPPER, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 134:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_LENGTH, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 135:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TRUNCATE, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 136:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_ROUND, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 137:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TYPE_OF, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 138:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TO_STRING, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
case 139:
 this.$ = Instruccion.nuevaFuncNativa(TIPO_FUNC_NATIVA.FUNC_TO_CHAR_ARRAY, $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5; 
break;
}
},
table: [{1:[2,3],2:[1,3],3:1,4:2,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{1:[3]},{5:[1,76],7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{6:[1,78]},o($Vz,[2,5]),{6:[1,79]},o($Vz,[2,7]),o($Vz,[2,8]),{6:[1,80]},{6:[1,81]},{6:[1,82]},{6:[1,83]},o($Vz,[2,13]),o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,16]),o($Vz,[2,17]),o($Vz,[2,18]),o($VA,$VB,{6:[1,84]}),o($VA,$VC,{6:[1,85]}),o($Vz,[2,21]),o($Vz,[2,22]),o($VA,$VD,{6:[1,86]}),{6:[1,87]},{6:[1,88]},o($VA,$VE,{6:[1,89]}),{6:[1,90]},{31:[1,91],98:[1,92]},o($VA,$VF,{32:$VG,54:[1,93],64:$VH,65:$VI,98:[1,98],102:[1,94]}),{31:[1,99]},{47:[1,100]},o($Vz,[2,69],{67:101,68:102,73:104,72:$VJ,74:$VK}),{54:[1,106]},{54:[1,107]},{6:[1,108]},{6:[1,109]},{6:[1,111],21:115,22:112,25:114,28:116,31:$VL,33:110,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_},{54:[1,132]},{70:[1,133]},o($V$,[2,140]),o($V$,[2,141]),o($V$,[2,142]),o($V$,[2,143]),o($V$,[2,144]),o($V$,[2,145]),o($V$,[2,146]),o($V$,[2,147]),o($V$,[2,148]),{31:[1,134]},o($V01,[2,31]),o($V01,[2,32]),o($V01,[2,33]),o($V01,[2,34]),o($V01,[2,35]),{54:[1,135]},{21:115,22:112,25:114,28:116,31:$VL,33:136,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:137,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,30:139,31:$VL,33:138,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($V$,[2,56]),o($V$,[2,57]),o($V$,[2,58]),o($V$,[2,59]),o($V$,[2,60]),o($V$,[2,61]),o($V$,[2,63]),o($V$,[2,64]),{54:[1,140]},{54:[1,141]},{54:[1,142]},{54:[1,143]},{54:[1,144]},{54:[1,145]},{54:[1,146]},{54:[1,147]},{54:[1,148]},{1:[2,1]},o($Vz,[2,4]),{1:[2,2]},o($Vz,[2,6]),o($Vz,[2,9]),o($Vz,[2,10]),o($Vz,[2,11]),o($Vz,[2,12]),o($Vz,[2,19]),o($Vz,[2,20]),o($Vz,[2,23]),o($Vz,[2,24]),o($Vz,[2,25]),o($Vz,[2,26]),o($Vz,[2,27]),{6:$V11,32:$V21,54:[1,150]},{99:[1,151]},{21:115,22:112,25:114,28:116,30:157,31:$VL,33:156,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,55:[1,152],56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,92:153,94:154,97:155,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{103:[1,158]},{21:115,22:112,25:114,28:116,31:$VL,33:159,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($V$,[2,67]),o($V$,[2,68]),{21:115,22:112,25:114,28:116,31:$VL,33:160,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,98:[1,161],104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{54:[1,162]},{30:163,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5},o($Vz,[2,70]),o($Vz,[2,71],{67:164,73:165,72:$VJ,74:$VK}),{69:[1,167],70:[1,166]},o($V31,[2,82]),{54:[1,168]},{21:115,22:112,25:114,28:116,31:$VL,33:169,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:170,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($Vz,[2,93]),o($Vz,[2,92]),{6:[1,171],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_},o($Vz,[2,95]),o($V$,$VC),o($V$,$VF,{54:[1,172],64:$VH,65:$VI,98:[1,173]}),o($V$,$VD),o($V$,$VB),o($V$,$VE),{21:115,22:112,25:114,28:116,31:$VL,33:174,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:175,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:176,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:177,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:178,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:179,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:180,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:181,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:182,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:183,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:184,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:185,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:186,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:187,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:188,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{8:190,14:191,30:192,31:[1,193],34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,89:189},{4:194,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{54:[1,195]},{21:115,22:112,25:114,28:116,31:$VL,33:196,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($V$,[2,42]),o($V41,[2,51],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX}),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,197],75:$V_},{55:[1,198]},{21:115,22:112,25:114,28:116,31:$VL,33:199,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:200,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:201,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:202,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:203,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:204,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:205,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:206,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:207,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:208,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{30:157,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,55:[1,209],92:210,97:155},{31:[1,211]},o([6,39,40,41,42,43,44,45,46,47,48,49,50,51,52,75],$V51,{76:[1,212]}),{55:[1,213],95:$V61},{55:[1,215],95:$V71},o($V81,[2,118]),o($V91,[2,110],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_}),{31:[1,217]},{54:[1,218]},o([6,55],[2,30],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_}),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_,99:[1,219]},{21:115,22:112,25:114,28:116,31:$VL,33:220,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{30:157,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,55:[1,221],92:222,97:155},{49:[1,223]},o($Vz,[2,72]),o($V31,[2,81]),{4:224,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,225],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{54:[1,226]},{21:115,22:112,25:114,28:116,31:$VL,33:227,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,228],75:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,229],75:$V_},o($Vz,[2,94]),{21:115,22:112,25:114,28:116,31:$VL,33:156,40:$V6,53:$V7,54:$V8,55:[1,230],56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,94:154,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:231,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,98:[1,232],104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_,76:[1,233]},o($Va1,[2,36],{41:$VO,42:$VP,43:$VQ,44:$VR}),o($Va1,[2,37],{41:$VO,42:$VP,43:$VQ,44:$VR}),o($Vb1,[2,38],{43:$VQ}),o($Vb1,[2,39],{43:$VQ}),o($V$,[2,40]),o($Vb1,[2,41],{43:$VQ}),o($Vc1,[2,43],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o($Vc1,[2,44],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o($Vc1,[2,45],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o($Vc1,[2,46],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o($Vc1,[2,47],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o($Vc1,[2,48],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR}),o([6,51,55,71,75,76,95,99],[2,49],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,52:$VZ}),o($V41,[2,50],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX}),{6:[1,234]},{6:[2,98]},{6:[2,99]},{31:[1,235]},{32:$VG},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,236],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:156,40:$V6,53:$V7,54:$V8,55:[1,237],56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,94:238,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,239],75:$V_},o($V$,[2,52]),{21:115,22:112,25:114,28:116,31:$VL,33:240,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,241],75:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,242],75:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,243],75:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,244],75:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,245],75:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,246],75:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,247],75:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,248],75:$V_},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,249],75:$V_},{6:[2,28],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_},{70:[1,250]},{55:[1,251],95:$V61},{32:[1,252]},{30:253,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,96:[1,254]},{76:[1,255]},{30:157,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,97:256},o($V$,[2,120]),{21:115,22:112,25:114,28:116,31:$VL,33:257,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($V81,[2,119]),{21:115,22:112,25:114,28:116,31:$VL,33:258,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($VA,$Vd1,{32:[1,259]}),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_,99:[1,260]},{70:[1,261]},{55:[1,262],95:$V61},{31:[1,263]},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,264],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($Vz,[2,76]),{21:115,22:112,25:114,28:116,31:$VL,33:265,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,266],75:$V_},{70:[1,267]},{70:[1,268]},o($V$,$V51),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_,99:[1,269]},{21:115,22:112,25:114,28:116,31:$VL,33:270,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:271,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:272,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{6:$V11,32:$V21},{87:[1,273]},{6:[2,107]},{55:[1,274],95:$V71},{70:[1,275]},o($Ve1,[2,53],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ}),o($V$,[2,131]),o($V$,[2,132]),o($V$,[2,133]),o($V$,[2,134]),o($V$,[2,135]),o($V$,[2,136]),o($V$,[2,137]),o($V$,[2,138]),o($V$,[2,139]),{4:276,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{70:[1,277]},{70:[1,279],100:[1,278]},{70:[1,280]},{70:[1,281]},{30:282,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,96:[1,283]},o($V81,[2,117]),o($V91,[2,109],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_}),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,284],75:$V_},{21:115,22:112,25:114,28:116,31:$VL,33:285,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{99:[1,286]},{4:287,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,288],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{70:[1,289]},{32:[1,290]},o($Vz,[2,75]),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,291],75:$V_},{70:[1,292]},{78:293,79:294,80:295,81:296,82:$Vf1,83:$Vg1},{4:299,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($V$,$Vd1),{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_,99:[1,300]},o($Ve1,[2,83],{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ}),{6:[1,301],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_},{54:[1,302]},{6:[2,108]},{4:303,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,304],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,305],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{4:306,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{30:307,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5},{21:115,22:112,25:114,28:116,31:$VL,33:156,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,94:308,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{4:309,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{4:310,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,311],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{70:[1,312]},{70:[1,313]},{6:[2,128]},{6:[2,125],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_},o($VA,$Vh1,{32:[1,314]}),{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,315],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($Vz,[2,113]),{4:316,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:318,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,100:[1,317],104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{70:[1,319]},{4:320,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,321],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{71:[1,322]},{71:[2,86],80:323,81:324,82:$Vf1,83:$Vg1},{71:[2,87]},o($Vi1,[2,89]),{76:[1,325]},{21:115,22:112,25:114,28:116,31:$VL,33:326,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,327],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{99:[1,328]},{14:331,22:330,31:[1,332],90:329},{21:115,22:112,25:114,28:116,31:$VL,33:333,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,334],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($V31,[2,74]),o($Vz,[2,103]),{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,335],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{98:[1,336]},{71:[1,337],95:$V71},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,338],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,339],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($Vz,[2,116]),{4:340,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{4:341,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{21:115,22:112,25:114,28:116,31:$VL,33:342,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($Vz,[2,111]),{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,343],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{101:[1,344]},{6:[2,127],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_},{4:345,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,346],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,347],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($V31,[2,80]),o($Vz,[2,84]),{71:[2,85]},o($Vi1,[2,88]),{4:348,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_,76:[1,349]},o($Vz,[2,96]),o($V$,$Vh1),{55:[1,350]},{55:[2,100]},{55:[2,101]},{32:$VG,64:$VH,65:$VI},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,55:[1,351],75:$V_},o($V31,[2,73]),o($Vz,[2,104]),{21:115,22:112,25:114,28:116,31:$VL,33:352,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{6:[2,123]},o($Vz,[2,105]),o($Vz,[2,114]),{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,353],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,354],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{6:[2,130],39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_},o($Vz,[2,112]),{47:[1,355]},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,356],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($V31,[2,78]),o($V31,[2,79]),{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[2,91],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{4:357,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{70:[1,358]},{6:[1,359]},{39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY,52:$VZ,75:$V_,99:[1,360]},o($Vz,[2,106]),o($Vz,[2,115]),{30:361,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5},o($V31,[2,77]),o($Vi1,[2,90],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,66:31,33:37,104:40,106:41,108:42,110:43,112:44,114:45,116:46,118:47,120:48,62:65,63:66,7:77,31:$V0,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,105:$Vq,107:$Vr,109:$Vs,111:$Vt,113:$Vu,115:$Vv,117:$Vw,119:$Vx,121:$Vy}),{4:362,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},o($Vz,[2,102]),{6:[2,122]},{49:[1,363]},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:$V0,33:37,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:$V6,53:$V7,54:$V8,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:65,63:66,66:31,69:$Vf,71:[1,364],77:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$Vm,93:$Vn,96:$Vo,101:$Vp,104:40,105:$Vq,106:41,107:$Vr,108:42,109:$Vs,110:43,111:$Vt,112:44,113:$Vu,114:45,115:$Vv,116:46,117:$Vw,118:47,119:$Vx,120:48,121:$Vy},{6:[2,126]},o($Vz,[2,97])],
defaultActions: {76:[2,1],78:[2,2],190:[2,98],191:[2,99],237:[2,107],274:[2,108],284:[2,128],295:[2,87],323:[2,85],330:[2,100],331:[2,101],337:[2,123],360:[2,122],363:[2,126]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
      
	const TIPO_OPERACION = require('./Controlador/Tipos/TipoOperacion');
	const TIPO_VALOR = require('./Controlador/Tipos/TipoValor');
	const TIPO_DATO = require('./Controlador/Tipos/TipoDato'); //para jalar el tipo de dato
	const Instruccion = require('./Controlador/Instrucciones/NodoIns');
        const TIPO_FUNC_NATIVA = require('./Controlador/Tipos/TipoFuncNativa')

        function toBool(texto) {
                if (texto == "true") {
                        return true
                }
                return false
        }

        let idSentencia = 1;
        let respuesta = {
                listaIns: [],
                errorSintactico: ""
        };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 34
break;
case 4:return 35
break;
case 5:return 36
break;
case 6:return 37
break;
case 7:return 38
break;
case 8:return 58
break;
case 9:return 59
break;
case 10:return 51
break;
case 11:return 52
break;
case 12:return 45
break;
case 13:return 46
break;
case 14:return 53
break;
case 15:return 50
break;
case 16:return 48
break;
case 17:return 47
break;
case 18:return 69
break;
case 19:return 72
break;
case 20:return 74
break;
case 21:return 77
break;
case 22:return 82
break;
case 23:return 84
break;
case 24:return 83
break;
case 25:return 87
break;
case 26:return 85
break;
case 27:return 88
break;
case 28:return 91
break;
case 29:return 86
break;
case 30:return 96
break;
case 31:return 100
break;
case 32:return 101
break;
case 33:return 103
break;
case 34:return 105
break;
case 35:return 107
break;
case 36:return 109
break;
case 37:return 111
break;
case 38:return 113
break;
case 39:return 115
break;
case 40:return 117
break;
case 41:return 119
break;
case 42:return 121
break;
case 43:return 93
break;
case 44:return 'hash'
break;
case 45:return 'dolar'
break;
case 46:return 44
break;
case 47:return 'amberson'
break;
case 48:return 54
break;
case 49:return 55
break;
case 50:return 41
break;
case 51:return 64
break;
case 52:return 39 
break;
case 53:return 95
break;
case 54:return 65
break;
case 55:return 40
break;
case 56:return 102 
break;
case 57:return 42
break;
case 58:return 76
break;
case 59:return 6
break;
case 60:return 32 
break;
case 61:return 49
break;
case 62:return 75
break;
case 63:return 'arroba' 
break;
case 64:return 98
break;
case 65:return 'slashInverso'
break;
case 66:return 99
break;
case 67:return 43 
break;
case 68:return 'underScore' 
break;
case 69:return 70
break;
case 70:return 'barra'
break;
case 71:return 71
break;
case 72:return 'colocho'
break;
case 73:return 31
break;
case 74:return 'letra'
break;
case 75:return 57
break;
case 76:return 56
break;
case 77: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 60; 
break;
case 78: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 79:return 5      /* End of File */
break;
case 80: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[\n\t\s\r]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:%)/i,/^(?:&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\*)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:,)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\.)/i,/^(?:\/)/i,/^(?::)/i,/^(?:;)/i,/^(?:=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\\)/i,/^(?:\])/i,/^(?:\^)/i,/^(?:_\b)/i,/^(?:\{)/i,/^(?:\|)/i,/^(?:\})/i,/^(?:~)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[a-zA-Z])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:'((\\')|[^\n\'])')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}